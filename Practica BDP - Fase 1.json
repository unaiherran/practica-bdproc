{"paragraphs":[{"text":"//Imports\n\nimport spark.implicits._\n\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.types._\n\n// Definir clase (se usa `` para PriceSQFt por tener espacios)\ncase class Hogares(mls:Long,\n                location: String,\n                price: Double,\n                bedrooms: Int,\n                bathrooms: Int,\n                size: Double,\n                `price SQ Ft`: Double,\n                status: String)\n\n// Creacion de esquema\nval miEsquema = new StructType()\n                    .add(\"MLS\", LongType, true)\n                    .add(\"Location\", StringType, true)\n                    .add(\"Price\", DoubleType,true)\n                    .add(\"Bedrooms\", IntegerType,true)\n                    .add(\"Bathrooms\", IntegerType,true)\n                    .add(\"Size\", DoubleType, true)\n                    .add(\"Price SQ Ft\", DoubleType, true)\n                    .add(\"Status\", StringType, true)\n            \n","user":"anonymous","dateUpdated":"2019-02-15T00:30:48+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"import spark.implicits._\nimport org.apache.spark.sql._\nimport org.apache.spark.sql.types._\ndefined class Hogares\nmiEsquema: org.apache.spark.sql.types.StructType = StructType(StructField(MLS,LongType,true), StructField(Location,StringType,true), StructField(Price,DoubleType,true), StructField(Bedrooms,IntegerType,true), StructField(Bathrooms,IntegerType,true), StructField(Size,DoubleType,true), StructField(Price SQ Ft,DoubleType,true), StructField(Status,StringType,true))\n"}]},"apps":[],"jobName":"paragraph_1549916498027_-1262800736","id":"20190211-212138_1787539785","dateCreated":"2019-02-11T21:21:38+0100","dateStarted":"2019-02-15T00:30:48+0100","dateFinished":"2019-02-15T00:30:50+0100","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:2433"},{"text":"// Carga de datos en un DataSet\nval preciosHogaresDS = spark.read\n                        .option(\"sep\",\",\")\n                        .option(\"header\",true)\n                        .schema(miEsquema)    \n                        .csv(\"file:///home/kc/Documentos/RealEstate.csv\").as[Hogares]\n","user":"anonymous","dateUpdated":"2019-02-15T00:30:50+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"preciosHogaresDS: org.apache.spark.sql.Dataset[Hogares] = [MLS: bigint, Location: string ... 6 more fields]\n"}]},"apps":[],"jobName":"paragraph_1549917293211_1626872938","id":"20190211-213453_764772189","dateCreated":"2019-02-11T21:34:53+0100","dateStarted":"2019-02-15T00:30:50+0100","dateFinished":"2019-02-15T00:30:50+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2434"},{"text":"// este paso sólo vale para ver que se ha cargado en el dataset. EN producción se quitaría\n\npreciosHogaresDS.show(5)","user":"anonymous","dateUpdated":"2019-02-15T00:30:50+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"+------+------------------+--------+--------+---------+------+-----------+----------+\n|   MLS|          Location|   Price|Bedrooms|Bathrooms|  Size|Price SQ Ft|    Status|\n+------+------------------+--------+--------+---------+------+-----------+----------+\n|132842|     Arroyo Grande|795000.0|       3|        3|2371.0|      335.3|Short Sale|\n|134364|       Paso Robles|399000.0|       4|        3|2818.0|     141.59|Short Sale|\n|135141|       Paso Robles|545000.0|       4|        3|3032.0|     179.75|Short Sale|\n|135712|         Morro Bay|909000.0|       4|        4|3540.0|     256.78|Short Sale|\n|136282|Santa Maria-Orcutt|109900.0|       3|        1|1249.0|      87.99|Short Sale|\n+------+------------------+--------+--------+---------+------+-----------+----------+\nonly showing top 5 rows\n\n"}]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.0.2.15:4040/jobs/job?id=2"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1549920789889_-1126105395","id":"20190211-223309_1766306900","dateCreated":"2019-02-11T22:33:09+0100","dateStarted":"2019-02-15T00:30:51+0100","dateFinished":"2019-02-15T00:30:51+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2435"},{"text":"// Sacar el valor actual del dolar/Euro\n\n// se define una funcion para hacer un GET\n//def get(url: String) = scala.io.Source.fromURL(url).mkString\n\ndef get(url: String) = scala.io.Source.fromURL(url).mkString\n\nval url: String =\"http://data.fixer.io/api/latest?access_key=e43e905ee1b19ec4e5d48cc73b2a0727&%20base=EUR&symbols=USD\"\n\n\n// el valor del cambio, está cinco caracteres después de que encuentra USD\n// me hubiese gustado usar alguna librería de JSON en Scala, pero no he encontrado nada, excepto pasarlo a un Dataset, y luego intentar sacar el valor de ahi, \n// pero no he dado con una solucion correcta \n\n// TODO gestionar Excepciones en el caso de que el API este caido o que devuelva otros valores que no se puedan convertir a Double\n\nval response = get (url)\n\nval index = response indexOf \"USD\"\nvar cambioUSDEUR : Double = response.substring(index+5,index+12).toDouble\n\n\n\n","user":"anonymous","dateUpdated":"2019-02-15T00:30:51+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"get: (url: String)String\nurl: String = http://data.fixer.io/api/latest?access_key=e43e905ee1b19ec4e5d48cc73b2a0727&%20base=EUR&symbols=USD\nresponse: String = {\"success\":true,\"timestamp\":1550183946,\"base\":\"EUR\",\"date\":\"2019-02-14\",\"rates\":{\"USD\":1.129565}}\nindex: Int = 82\ncambioUSDEUR: Double = 1.12956\n"}]},"apps":[],"jobName":"paragraph_1550167927056_-602140704","id":"20190214-191207_892435634","dateCreated":"2019-02-14T19:12:07+0100","dateStarted":"2019-02-15T00:30:51+0100","dateFinished":"2019-02-15T00:30:52+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2436"},{"text":"//val cambioUSDEUR : Double = 1.13\n\nval cambioSqFtSqMt: Double = 10.7639104\n\nval aEUR = udf[Double, Double]((d:Double) => d/cambioUSDEUR)\n\nval aSqMt = udf[Double, Double] ((f:Double) => f / cambioSqFtSqMt )\n\n","user":"anonymous","dateUpdated":"2019-02-15T00:30:52+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"cambioSqFtSqMt: Double = 10.7639104\naEUR: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,DoubleType,Some(List(DoubleType)))\naSqMt: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,DoubleType,Some(List(DoubleType)))\n"}]},"apps":[],"jobName":"paragraph_1549923020034_1349597157","id":"20190211-231020_1194881810","dateCreated":"2019-02-11T23:10:20+0100","dateStarted":"2019-02-15T00:30:52+0100","dateFinished":"2019-02-15T00:30:52+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2437"},{"text":"// Al no poder referenciar en la misma consulta valores calculados, hago una tabla auxiliar\n\n\nval tablaHogaresAux = preciosHogaresDS.select($\"Location\", aEUR($\"Price\").as(\"Precio EUR\"),aSqMt($\"Size\").as(\"Size M2\"),  $\"Bedrooms\", $\"Bathrooms\")\n\n\n\n//analizando los datos, se observa que algunas localizaciones tienen espacios extra antes y/o despues del nombre. Cómo realmente queremos incluir en la media tanto \"Oceano\" como \" Oceano\", creo una funcion auxiliar \n// singleSpace que quita los espacios iniciales y finales, y sustituye un numero determinado de espacios por uno sólo. es decir \"   Los     Alamos \" se convertiría en \"Los Alamos\"\n\ndef singleSpace(col: Column): Column = {\n  trim(regexp_replace(col, \" +\", \" \"))\n}\n\n\n// Finalmente creamos el dataset con el que vamos a trabajar\n\nval hogaresDS = tablaHogaresAux.select(singleSpace($\"Location\").as(\"Localizacion\"), $\"Precio EUR\", $\"Size M2\", $\"Bedrooms\", $\"Bathrooms\", ($\"Precio EUR\" / $\"Size M2\").as(\"PrecioM2\"))\n\n","user":"anonymous","dateUpdated":"2019-02-15T00:30:52+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"tablaHogaresAux: org.apache.spark.sql.DataFrame = [Location: string, Precio EUR: double ... 3 more fields]\nsingleSpace: (col: org.apache.spark.sql.Column)org.apache.spark.sql.Column\nhogaresDS: org.apache.spark.sql.DataFrame = [Localizacion: string, Precio EUR: double ... 4 more fields]\n"}]},"apps":[],"jobName":"paragraph_1549927219295_1910977740","id":"20190212-002019_1897651797","dateCreated":"2019-02-12T00:20:19+0100","dateStarted":"2019-02-15T00:30:53+0100","dateFinished":"2019-02-15T00:30:53+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2438"},{"text":"// Agrupamos por localización y obtenemos la media, pero los resultados que se muestran son \"feos\"\n\nval mediaPorLocalizacion = hogaresDS.groupBy(\"Localizacion\").agg(avg(\"PrecioM2\").as(\"Preciom2medio\"))\n","user":"anonymous","dateUpdated":"2019-02-15T00:33:36+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"mediaPorLocalizacion: org.apache.spark.sql.DataFrame = [Localizacion: string, Preciom2medio: double]\n"}]},"apps":[],"jobName":"paragraph_1549927794891_581873989","id":"20190212-002954_807082658","dateCreated":"2019-02-12T00:29:54+0100","dateStarted":"2019-02-15T00:30:53+0100","dateFinished":"2019-02-15T00:30:53+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2439"},{"text":"// funcion auxiliar para redondear a dos decimales\ndef roundAt(p: Int)(n: Double): Double = { val s = math pow (10, p); (math round n * s) / s }\ndef roundAt2(p: Double) = roundAt(2)(p)\n\n// udf para aplicar el redondeo a dos decimales a cada columna\nval redondeaPrecio = udf[Double, Double] ((p:Double) => roundAt2(p))","user":"anonymous","dateUpdated":"2019-02-15T00:30:53+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"roundAt: (p: Int)(n: Double)Double\nroundAt2: (p: Double)Double\nredondeaPrecio: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,DoubleType,Some(List(DoubleType)))\n"}]},"apps":[],"jobName":"paragraph_1550163084944_-423341174","id":"20190214-175124_634779803","dateCreated":"2019-02-14T17:51:24+0100","dateStarted":"2019-02-15T00:30:54+0100","dateFinished":"2019-02-15T00:30:54+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2440"},{"text":"// obtenemos el resultado deseado, pero con demasiados decimales propios de todas las operaciones ejecutadas\n// antes de dar la salida, hay que formatear los valores a dos decimales para que tengan un aspecto mejor\n\n// El redondeo se hace justo al final de las trasnformaciones para evitar errores de calculo por el mismo\n\nmediaPorLocalizacion.select($\"Localizacion\", redondeaPrecio($\"Preciom2medio\").as(\"Precio por m2\"))\n            .coalesce(1)\n            .write\n            .format(\"json\")\n            .save(\"file:///home/kc/Documentos/real-estate\")\n","user":"anonymous","dateUpdated":"2019-02-15T00:34:49+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[]},"runtimeInfos":{"jobUrl":{"propertyName":"jobUrl","label":"SPARK JOB","tooltip":"View in Spark web UI","group":"spark","values":["http://10.0.2.15:4040/jobs/job?id=3"],"interpreterSettingId":"spark"}},"apps":[],"jobName":"paragraph_1550159711364_313737546","id":"20190214-165511_1513951333","dateCreated":"2019-02-14T16:55:11+0100","dateStarted":"2019-02-15T00:30:54+0100","dateFinished":"2019-02-15T00:30:55+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2441"},{"user":"anonymous","dateUpdated":"2019-02-15T00:30:56+0100","config":{"colWidth":12,"fontSize":9,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1550186528649_-921266486","id":"20190215-002208_558719277","dateCreated":"2019-02-15T00:22:08+0100","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:2442"}],"name":"Practica BDP - Fase 1","id":"2E5X46751","noteParams":{},"noteForms":{},"angularObjects":{"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}